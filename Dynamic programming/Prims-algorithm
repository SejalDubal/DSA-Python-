import heapq

def prim_mst(graph):
    # Number of vertices in the graph
    n = len(graph)

    # Array to store the minimum edge weight to reach each vertex
    key = [float('inf')] * n

    # Array to track vertices included in the MST
    in_mst = [False] * n

    # Array to store the parent nodes in the MST for each vertex
    parent = [-1] * n

    # Priority queue to store (weight, vertex) tuples
    pq = [(0, 0)]  # Start with vertex 0 and weight 0
    key[0] = 0

    while pq:
        # Extract the vertex with the minimum key value
        weight, u = heapq.heappop(pq)

        # If the vertex is already in MST, continue
        if in_mst[u]:
            continue

        # Include vertex in MST
        in_mst[u] = True
        print(f"Include vertex {u} in MST with edge weight {weight}")

        # Update the key value and parent index of the adjacent vertices
        for v, edge_weight in enumerate(graph[u]):
            # If v is not in MST and edge weight u-v is less than key[v]
            if edge_weight > 0 and not in_mst[v] and edge_weight < key[v]:
                key[v] = edge_weight
                parent[v] = u
                heapq.heappush(pq, (edge_weight, v))

    # Print the edges in the MST
    print("\nEdges in the Minimum Spanning Tree:")
    for i in range(1, n):
        print(f"{parent[i]} - {i} \t weight: {graph[i][parent[i]]}")

# Taking input for the graph
print("Enter the number of vertices:")
n = int(input())
print("Enter the adjacency matrix (use 0 for no edge):")

# Initialize an empty adjacency matrix
graph = []
for i in range(n):
    row = list(map(int, input(f"Row {i+1}: ").split()))
    graph.append(row)

print("\nRunning Prim's Algorithm...\n")
prim_mst(graph)
