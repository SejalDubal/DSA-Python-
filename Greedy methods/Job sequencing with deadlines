class Job:
    def __init__(self, job_id, deadline, profit):
        self.job_id = job_id
        self.deadline = deadline
        self.profit = profit

def job_sequencing(jobs):
    # Sort jobs by profit in descending order
    jobs.sort(key=lambda x: x.profit, reverse=True)

    # Find the maximum deadline to determine the number of slots
    max_deadline = max(job.deadline for job in jobs)

    # Array to store the sequence of jobs
    job_sequence = [None] * max_deadline

    # Array to mark free time slots
    slot_available = [False] * max_deadline

    total_profit = 0  # Track the total profit from scheduled jobs
    scheduled_jobs = []  # To keep track of which jobs are scheduled

    # Iterate through each job in descending profit order
    for job in jobs:
        # Find a free slot for this job before its deadline
        for j in range(min(job.deadline, max_deadline) - 1, -1, -1):
            if not slot_available[j]:  # If slot is free
                slot_available[j] = True
                job_sequence[j] = job.job_id  # Assign job to the slot
                total_profit += job.profit  # Add profit to total
                scheduled_jobs.append(job.job_id)
                break  # Move to the next job once scheduled

    print("Scheduled Jobs:", scheduled_jobs)
    print("Total Profit:", total_profit)

# Taking input for jobs
n = int(input("Enter number of jobs: "))
jobs = []
for i in range(n):
    job_id = input(f"Enter Job ID for job {i + 1}: ")
    deadline = int(input(f"Enter deadline for job {job_id}: "))
    profit = int(input(f"Enter profit for job {job_id}: "))
    jobs.append(Job(job_id, deadline, profit))

print("\nRunning Job Sequencing with Deadlines...\n")
job_sequencing(jobs)
